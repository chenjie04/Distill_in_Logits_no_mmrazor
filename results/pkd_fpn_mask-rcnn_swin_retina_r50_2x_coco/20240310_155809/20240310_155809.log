2024/03/10 15:58:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 696218934
    GPU 0,1: NVIDIA RTX A5000
    CUDA_HOME: /usr/local/cuda-11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.2

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 696218934
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2024/03/10 15:58:12 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
check_points = 'work_dirs/pkd_fpn_mask-rcnn_swin_retina_r50_2x_coco/last_checkpoint'
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(_scope_='mmdet', interval=1, type='CheckpointHook'),
    logger=dict(_scope_='mmdet', interval=50, type='LoggerHook'),
    param_scheduler=dict(_scope_='mmdet', type='ParamSchedulerHook'),
    sampler_seed=dict(_scope_='mmdet', type='DistSamplerSeedHook'),
    timer=dict(_scope_='mmdet', type='IterTimerHook'),
    visualization=dict(_scope_='mmdet', type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
find_unused_parameters = False
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(
    _scope_='mmdet', by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    _scope_='mmrazor',
    architecture=dict(
        cfg_path='mmdet::retinanet/retinanet_r50_fpn_2x_coco.py',
        pretrained=False),
    distiller=dict(
        distill_losses=dict(
            loss_pkd_fpn0=dict(loss_weight=6, type='PKDLoss'),
            loss_pkd_fpn1=dict(loss_weight=6, type='PKDLoss'),
            loss_pkd_fpn2=dict(loss_weight=6, type='PKDLoss'),
            loss_pkd_fpn3=dict(loss_weight=6, type='PKDLoss')),
        loss_forward_mappings=dict(
            loss_pkd_fpn0=dict(
                preds_S=dict(data_idx=0, from_student=True, recorder='fpn'),
                preds_T=dict(data_idx=0, from_student=False, recorder='fpn')),
            loss_pkd_fpn1=dict(
                preds_S=dict(data_idx=1, from_student=True, recorder='fpn'),
                preds_T=dict(data_idx=1, from_student=False, recorder='fpn')),
            loss_pkd_fpn2=dict(
                preds_S=dict(data_idx=2, from_student=True, recorder='fpn'),
                preds_T=dict(data_idx=2, from_student=False, recorder='fpn')),
            loss_pkd_fpn3=dict(
                preds_S=dict(data_idx=3, from_student=True, recorder='fpn'),
                preds_T=dict(data_idx=3, from_student=False, recorder='fpn'))),
        student_recorders=dict(fpn=dict(source='neck', type='ModuleOutputs')),
        teacher_recorders=dict(fpn=dict(source='neck', type='ModuleOutputs')),
        type='ConfigurableDistiller'),
    teacher=dict(
        cfg_path=
        'mmdet::swin/mask-rcnn_swin-s-p4-w7_fpn_amp-ms-crop-3x_coco.py',
        pretrained=False),
    teacher_ckpt=
    'https://download.openmmlab.com/mmdetection/v2.0/swin/mask_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco/mask_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco_20210903_104808-b92c91f1.pth',
    type='FpnTeacherDistill')
optim_wrapper = dict(
    _scope_='mmdet',
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        _scope_='mmdet',
        begin=0,
        by_epoch=False,
        end=500,
        start_factor=0.001,
        type='LinearLR'),
    dict(
        _scope_='mmdet',
        begin=0,
        by_epoch=True,
        end=24,
        gamma=0.1,
        milestones=[
            16,
            22,
        ],
        type='MultiStepLR'),
]
resume = False
teacher_ckpt = 'https://download.openmmlab.com/mmdetection/v2.0/swin/mask_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco/mask_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco_20210903_104808-b92c91f1.pth'
test_cfg = dict(_scope_='mmdet', type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
    ],
    type='CocoMetric')
test_pipeline = [
    dict(_scope_='mmdet', backend_args=None, type='LoadImageFromFile'),
    dict(_scope_='mmdet', keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(
        _scope_='mmdet',
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True),
    dict(
        _scope_='mmdet',
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(
    _scope_='mmdet', max_epochs=24, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(_scope_='mmdet', type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(_scope_='mmdet', backend_args=None, type='LoadImageFromFile'),
    dict(
        _scope_='mmdet',
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True),
    dict(_scope_='mmdet', keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(_scope_='mmdet', prob=0.5, type='RandomFlip'),
    dict(_scope_='mmdet', type='PackDetInputs'),
]
val_cfg = dict(type='mmrazor.SingleTeacherDistillValLoop')
val_dataloader = dict(
    batch_size=4,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
    ],
    type='CocoMetric')
vis_backends = [
    dict(_scope_='mmdet', type='LocalVisBackend'),
]
visualizer = dict(
    _scope_='mmdet',
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/pkd_fpn_mask-rcnn_swin_retina_r50_2x_coco'

2024/03/10 15:58:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/03/10 15:58:31 - mmengine - INFO - load model from: torchvision://resnet50
2024/03/10 15:58:31 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2024/03/10 15:58:32 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

architecture.backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

architecture.neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.fpn_convs.3.conv.weight - torch.Size([256, 2048, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

architecture.neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.cls_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.cls_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.cls_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.cls_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.reg_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.reg_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.reg_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.reg_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

architecture.bbox_head.retina_cls.weight - torch.Size([720, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

architecture.bbox_head.retina_cls.bias - torch.Size([720]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

architecture.bbox_head.retina_reg.weight - torch.Size([36, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

architecture.bbox_head.retina_reg.bias - torch.Size([36]): 
NormalInit: mean=0, std=0.01, bias=0 

teacher.backbone.patch_embed.projection.weight - torch.Size([96, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.patch_embed.projection.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.patch_embed.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.patch_embed.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.norm1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.norm1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight - torch.Size([288, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.attn.w_msa.proj.weight - torch.Size([96, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.attn.w_msa.proj.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.ffn.layers.0.0.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.ffn.layers.0.0.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.ffn.layers.1.weight - torch.Size([96, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.0.ffn.layers.1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.norm1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.norm1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight - torch.Size([288, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.attn.w_msa.proj.weight - torch.Size([96, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.attn.w_msa.proj.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.ffn.layers.0.0.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.ffn.layers.0.0.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.ffn.layers.1.weight - torch.Size([96, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.blocks.1.ffn.layers.1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.downsample.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.downsample.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.0.downsample.reduction.weight - torch.Size([192, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 6]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight - torch.Size([576, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.attn.w_msa.proj.weight - torch.Size([192, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.attn.w_msa.proj.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.norm2.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.norm2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.ffn.layers.0.0.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.ffn.layers.0.0.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.ffn.layers.1.weight - torch.Size([192, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.0.ffn.layers.1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 6]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight - torch.Size([576, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.attn.w_msa.proj.weight - torch.Size([192, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.attn.w_msa.proj.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.norm2.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.norm2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.ffn.layers.0.0.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.ffn.layers.0.0.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.ffn.layers.1.weight - torch.Size([192, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.blocks.1.ffn.layers.1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.downsample.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.downsample.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.1.downsample.reduction.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.0.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.1.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.2.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.3.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.4.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.5.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.6.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.7.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.8.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.9.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.10.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.11.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.12.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.13.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.14.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.15.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.16.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.attn.w_msa.relative_position_bias_table - torch.Size([169, 12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.attn.w_msa.qkv.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.attn.w_msa.proj.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.attn.w_msa.proj.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.ffn.layers.0.0.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.ffn.layers.1.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.blocks.17.ffn.layers.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.downsample.norm.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.downsample.norm.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.2.downsample.reduction.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 24]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.attn.w_msa.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.attn.w_msa.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.ffn.layers.0.0.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.0.ffn.layers.1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 24]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.attn.w_msa.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.attn.w_msa.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.ffn.layers.0.0.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.stages.3.blocks.1.ffn.layers.1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.0.conv.weight - torch.Size([256, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.1.conv.weight - torch.Size([256, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.2.conv.weight - torch.Size([256, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.3.conv.weight - torch.Size([256, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_cls.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.rpn_head.rpn_reg.bias - torch.Size([12]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.fc_cls.weight - torch.Size([81, 1024]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.fc_cls.bias - torch.Size([81]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.fc_reg.weight - torch.Size([320, 1024]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.fc_reg.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.conv_logits.weight - torch.Size([80, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  

teacher.roi_head.mask_head.conv_logits.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of FpnTeacherDistill  
2024/03/10 15:58:32 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/03/10 15:58:32 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/03/10 15:58:32 - mmengine - INFO - Checkpoints will be saved to /home/chenjie04/workstation/mmrazor/work_dirs/pkd_fpn_mask-rcnn_swin_retina_r50_2x_coco.
2024/03/10 15:59:10 - mmengine - INFO - Epoch(train)  [1][   50/14659]  lr: 9.9098e-04  eta: 3 days, 2:07:08  time: 0.7585  data_time: 0.0399  memory: 8049  loss: 24.7097  student.loss_cls: 1.2027  student.loss_bbox: 0.6895  distill.loss_pkd_fpn0: 5.7345  distill.loss_pkd_fpn1: 5.7054  distill.loss_pkd_fpn2: 5.7817  distill.loss_pkd_fpn3: 5.5959
